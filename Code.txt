' Global variable to store the chosen accuracy for color variations
Public choosenStep As Double

' Global flag to track if precision has been chosen
Public isPrecisionChosen As Boolean

' Subroutine to prompt the user for accuracy of color variations
Sub AskForPrecision()
    ' Variable to store user input and valid input options
    Dim userInput As Variant
    Dim validInputs As Variant
    
     ' Define valid input options
    validInputs = Array(1, 2, 5, 10)
    
    ' Display an input box to the user to enter the desired accuracy
    userInput = InputBox("Enter Accuracy (1%, 2%, 5%, lub 10%)", "Accuracy")
    
    If userInput = "" Then
        MsgBox "Operation Cancelled", vbInformation, "Cancelled"
        isPrecisionChosen = False
        Exit Sub
    End If
    
     ' Validate the user input for numeric value and predefined options
    If Not IsNumeric(userInput) Then
        MsgBox "Error", vbCritical, "Error"
        End
    ElseIf Not IsInArray(CInt(userInput), validInputs) Then
        MsgBox "Invalid value. Acceptable values: 1, 2, 5, 10.", vbCritical, "Error"
        End
    Else
        choosenStep = CLng(userInput) / 100
    End If
    
    isPrecisionChosen = True
End Sub

' Function to check if a value exists in an array
Function IsInArray(valToBeFound As Variant, arr As Variant) As Boolean
    Dim element As Variant
    For Each element In arr
        If element = valToBeFound Then
            IsInArray = True
            Exit Function
        End If
    Next element
End Function
' Subroutine linked to a button click to generate color variations
Private Sub GenerateColorBtn_Click()

    ' Set the flag to False initially
    isPrecisionChosen = False
    
    ' Call the subroutine to ask the user for precision
    Call AskForPrecision
    
    'Exit the procedure if precision was not chosen
     If Not isPrecisionChosen Then
        Exit Sub
    End If
    
    ' Variables to store RGB values, new RGB values, HSL values, and iteration counters
    Dim R As Byte, G As Byte, B As Byte
    Dim NewR As Byte, NewG As Byte, NewB As Byte
    Dim H As Double, S As Double, L As Double
    Dim ActualH As Double, ActualS As Double, ActualL As Double
    Dim HslArray As Variant
    Dim NewRgbArray As Variant
    
   ' Variables to store iteration counters
    Dim iteration As Integer
    iteration = 0
    Dim MaxIterations As Integer
    
     ' Calculate the maximum number of iterations for color variations, (infinite loop protection)
    MaxIterations = (100 / (choosenStep * 100)) ^ 2
    
    ' Initialize starting and actual row/column
    Dim StartRow As Integer
    StartRow = 6
    Dim ActualRow As Integer
    ActualRow = StartRow
    
    Dim StartCol As Integer
    StartCol = 4
    Dim ActualCol As Integer
    ActualCol = StartCol
    
    ' Determine the last row and column with data to clean data before next generate
    Dim LastRow As Long
    LastRow = Cells(Rows.Count, StartCol).End(xlUp).Row
    Dim LastCol As Long
    LastCol = Cells(StartRow, Columns.Count).End(xlToLeft).Column
    
    ' Clear the range for new data
    Range(Cells(StartRow, StartCol), Cells(LastRow, LastCol)).Clear
    
    ' Get the base RGB values from specified cells
    R = Range("A3").Value
    G = Range("B3").Value
    B = Range("C3").Value
    
    ' Set the color and value of the starting cell
    With Cells(StartRow, StartCol)
    .Interior.Color = RGB(R, G, B)
    .NumberFormat = "@"
    .Value = R & "," & G & "," & B
    End With
    
    ' Convert RGB to HSL
    HslArray = RgbToHsl(R, G, B)
    
    ' Assign HSL values from the array
    H = HslArray(0)
    S = HslArray(1)
    L = HslArray(2)
    
    ' Initialize actual saturation and lightness
    ActualS = S
    ActualL = L
   
    ' Loop to generate color variations based on HSL values
   Do While ActualL < 1 And iteration < MaxIterations
   Do While ActualS < 1 And iteration < MaxIterations
   
    ' Increment the row for each new color variation
    ActualRow = ActualRow + 1
    
    ' Convert modified HSL back to RGB
    NewRgbArray = HSLtoRGB(H, ActualS, ActualL)
    NewR = NewRgbArray(0)
    NewG = NewRgbArray(1)
    NewB = NewRgbArray(2)
    
    ' Set the color and value of the cell for the new RGB value
    With Cells(ActualRow, ActualCol)
    .Interior.Color = RGB(NewR, NewG, NewB)
    .NumberFormat = "@"
    .Value = NewR & "," & NewG & "," & NewB
    End With

    ' Increment saturation and iteration counter
    ActualS = Round(ActualS + choosenStep, 2)
    iteration = iteration + 1
    Loop
    
    ' Increment lightness and reset saturation for next column
    ActualL = Round(ActualL + choosenStep, 2)
    ActualS = Round(S, 2)
    
    ' Check to exit the outer loop when lightness reaches or exceeds 1
    If ActualL >= 1 Then
    Exit Do
    End If
    
    ' Convert new HSL values back to RGB
    NewRgbArray = HSLtoRGB(H, ActualS, ActualL)
    NewR = NewRgbArray(0)
    NewG = NewRgbArray(1)
    NewB = NewRgbArray(2)
    
    ' Reset the row and increment the column for next set of color variations
    ActualRow = StartRow
    ActualCol = ActualCol + 1
    
    ' Set the color and value of the cell for the new RGB value
    With Cells(ActualRow, ActualCol)
    .Interior.Color = RGB(NewR, NewG, NewB)
    .NumberFormat = "@"
    .Value = NewR & "," & NewG & "," & NewB
    End With
    
    ' Repeat the process until all color variations are generated
    
    Loop
    
    ' Align the content in the generated cells
    With Range(Cells(StartRow, StartCol), Cells(ActualRow, ActualCol))
    .HorizontalAlignment = xlCenter
    .VerticalAlignment = xlCenter
    End With
    
End Sub

    ' Funcion to convert RGB to HSL
Private Function RgbToHsl(ByVal R As Byte, ByVal G As Byte, ByVal B As Byte) As Variant

    ' Variables for RGB normalization, max and min RGB values, and HSL values
    Dim MaxRGB As Double, MinRGB As Double, Delta As Double
    Dim H As Double, S As Double, L As Double
    
    ' Normalize RGB values to the range of 0 to 1
    Dim NormR As Double, NormG As Double, NormB As Double
    NormR = R / 255
    NormG = G / 255
    NormB = B / 255
    
    ' Find maximum and minimum RGB values
    MaxRGB = WorksheetFunction.Max(NormR, NormG, NormB)
    MinRGB = WorksheetFunction.Min(NormR, NormG, NormB)
    Delta = MaxRGB - MinRGB
    
    ' Calculate lightness
    L = Round((MaxRGB + MinRGB) / 2, 2)
    
    ' Calculate saturation and hue
    If Delta = 0 Then
        H = 0
        S = 0
    Else
        If L < 0.5 Then
            S = Delta / (MaxRGB + MinRGB)
        Else
            S = Delta / (2 - MaxRGB - MinRGB)
        End If
        
    ' Calculate hue based on the maximum RGB value
        Select Case MaxRGB
            Case NormR
                H = (60 * ((NormG - NormB) / Delta) + 360) Mod 360
            Case NormG
                H = (60 * ((NormB - NormR) / Delta) + 120) Mod 360
            Case NormB
                H = (60 * ((NormR - NormG) / Delta) + 240) Mod 360
        End Select
    End If
    
    ' Return an array of HSL values
    RgbToHsl = Array(H, S, L)
    
End Function

    ' Function to convert HSL to RGB
Function HSLtoRGB(H As Double, S As Double, L As Double) As Variant

    ' Variables for RGB
    Dim R As Double, G As Double, B As Double
    Dim temp1 As Double, temp2 As Double
    Dim tempR As Double, tempG As Double, tempB As Double
    Dim tempH As Double
    
    tempH = H / 360
    
    ' Handle the case where saturation is zero
    If S = 0 Then
        R = L
        G = L
        B = L
    Else
    ' Calculate temporary values for the conversion process
        If L < 0.5 Then
            temp1 = L * (1 + S)
        Else
            temp1 = L + S - L * S
        End If
        temp2 = 2 * L - temp1
    ' Adjust hue for RGB conversion
        tempR = tempH + 1 / 3
        tempG = tempH
        tempB = tempH - 1 / 3
    ' Adjust color components for correct range
        tempR = AdjustColor(tempR)
        tempG = AdjustColor(tempG)
        tempB = AdjustColor(tempB)
    ' Get individual RGB components
        R = GetColorComponent(temp1, temp2, tempR)
        G = GetColorComponent(temp1, temp2, tempG)
        B = GetColorComponent(temp1, temp2, tempB)
    End If
    
    ' Convert RGB components to the range of 0 to 255
    R = Round(R * 255)
    G = Round(G * 255)
    B = Round(B * 255)
    
    ' Return an array of RGB values
    HSLtoRGB = Array(R, G, B)
    
End Function

' Helper function to adjust color component values
Function AdjustColor(c As Double) As Double

' Adjust the value to be within the range of 0 to 1
    If c < 0 Then c = c + 1
    If c > 1 Then c = c - 1
    AdjustColor = c
    
End Function

' Function to get individual color components for RGB
Function GetColorComponent(temp1 As Double, temp2 As Double, tempColor As Double) As Double

    ' Calculate the color component based on the HSL values
    If 6 * tempColor < 1 Then
        GetColorComponent = temp2 + (temp1 - temp2) * 6 * tempColor
    ElseIf 2 * tempColor < 1 Then
        GetColorComponent = temp1
    ElseIf 3 * tempColor < 2 Then
        GetColorComponent = temp2 + (temp1 - temp2) * ((2 / 3) - tempColor) * 6
    Else
        GetColorComponent = temp2
    End If
End Function

' Event handler for changes in specific cells on the worksheet
Private Sub Worksheet_Change(ByVal Target As Range)

    ' Define the range of cells to monitor for changes
    Dim monitoredRange As Range
    Set monitoredRange = Union(Range("A3"), Range("B3"), Range("C3"))
    
    ' Check if the change occurred in the monitored range
    If Not Intersect(Target, monitoredRange) Is Nothing Then
    
    ' Variables to store RGB values and their opposite values
    Dim R As Byte, G As Byte, B As Byte
    Dim OppositeR As Byte, OppositeG As Byte, OppositeB As Byte
    
    ' Set RGB Values
    R = Range("A3").Value
    G = Range("B3").Value
    B = Range("C3").Value
    
    ' Calculate the opposite RGB values
    OppositeR = 255 - R
    OppositeG = 255 - G
    OppositeB = 255 - B
    
    ' Set the background color of a specified cell based on the RGB values and
    'set the font color to the opposite RGB values for contrast
    Range("A1").Interior.Color = RGB(R, G, B)
    Range("A1").Font.Color = RGB(OppositeR, OppositeG, OppositeB)
    End If
    
End Sub
